##
В отличие от строк в кортежах и списках допускаются элементы разных типов.
Кортежи неизменяемы.
Списки же можно изменять — добавлять и удалять элементы в любой удобный момент.

                                *****************
                                *****TURPLES*****
                                *****************                                --------------------------------------------------------------------------------------------------------------------
Создать кортеж с помощью запятых и оператора ()

turple = 'yo',	turple = ('yo',)  # занятая после каждого эл-та кортежа, кроме последнего. 
print(turple)	print(turple)	  # если пропустить запятую, получим str('yo')
('yo',)		('yo',)
--------------------------------------------------------------------------------------------------------------------
Распаковка кортежа
marx_tuple = ('Groucho', 'Chico', 'Harpo')
a, b, c = marx_tuple
>>> a		>>> b		>>> c
'Groucho'	'Chico'		'Harpo'
--------------------------------------------------------------------------------------------------------------------
обмен значениями
password = 'swordfish'
icecream = 'tuttifrutti'
password, icecream = icecream, password
--------------------------------------------------------------------------------------------------------------------
Создать кортеж с помощью функции tuple()
Функция преобразования tuple() создает кортежи из других объектов
>>> marx_list = ['Groucho', 'Chico', 'Harpo']  # список
>>> tuple(marx_list)
('Groucho', 'Chico', 'Harpo')
--------------------------------------------------------------------------------------------------------------------
Объединяем кортежи с помощью оператора +
>>> ('Groucho',) + ('Chico', 'Harpo')
('Groucho', 'Chico', 'Harpo')
--------------------------------------------------------------------------------------------------------------------
Размножаем элементы с помощью оператора *
>>> ('yada',) * 3
('yada', 'yada', 'yada')
--------------------------------------------------------------------------------------------------------------------
Сравнение кортежей похоже на сравнение списков:
>>> a = (7, 2)
>>> b = (7, 2, 9)
>>> a == b
False
>>> a <= b
True
>>> a < b
True
--------------------------------------------------------------------------------------------------------------------
Итерирование по кортежам выполняется так же, как и итерирование по другим типам
--------------------------------------------------------------------------------------------------------------------
                              
                                *****************
                                ******LISTS******
                                ***************** 
--------------------------------------------------------------------------------------------------------------------
список изменяем: вы можете добавить новые элементы, перезаписать существующие и удалить ненужные. Одно и то же значение может встречаться в списке несколько раз.
--------------------------------------------------------------------------------------------------------------------
Если вы хотите размещать в последовательности только уникальные значения и вам неважен их порядок, множество (set) может оказаться более удобным вариантом, чем список.
--------------------------------------------------------------------------------------------------------------------
можете создать пустой список с помощью функции list():
>>> another_empty_list = list()
>>> another_empty_list
[]

Функция list() преобразует другие итерабельные типы данных (например, кортежи, строки, множества и словари) в списки.
--------------------------------------------------------------------------------------------------------------------
функцию split() можно использовать для преобразования строки в список, указав некую строку-разделитель:
>>> talk_like_a_pirate_day = '9/19/2019'
>>> talk_like_a_pirate_day.split('/')
['9', '19', '2019']

если в оригинальной строке содержится несколько включений строки-разделителя подряд, вы получите пустую строку:
>>> splitme = 'a/b//c/d///e'
>>> splitme.split('/')
['a', 'b', '', 'c', 'd', '', '', 'e']
--------------------------------------------------------------------------------------------------------------------
Как и в случае со строками, вы можете извлечь одно значение из списка, указав его
смещение
--------------------------------------------------------------------------------------------------------------------
извлечь из списка подсписок, использовав разделение (slice):
>>> marxes = ['Groucho', 'Chico,' 'Harpo']
>>> marxes[0:2]
['Groucho', 'Chico']
--------------------------------------------------------------------------------------------------------------------
Чтобы изменить порядок элементов в списке, используйте функцию list.reverse():
>>> marxes = ['Groucho', 'Chico', 'Harpo']
>>> marxes.reverse()
>>> marxes
['Harpo', 'Chico', 'Groucho']
Функция reverse() изменяет список, но не возвращает его значения.
--------------------------------------------------------------------------------------------------------------------
изменить значение элемента из списка по смещению
>>> marxes = ['Groucho', 'Chico', 'Harpo']
>>> marxes[2] = 'Wanda'
>>> marxes
['Groucho', 'Chico', 'Wanda']
--------------------------------------------------------------------------------------------------------------------
>>> del marxes[-1]  # удалить значение
del является оператором Python, а не методом списка
list = [{1, 2}, ('a'), ['1.1', '2.2']]
del list[:]
# Output: List: []
--------------------------------------------------------------------------------------------------------------------
с помощью разделения можно присвоить значения под­списку:
то, что находится справа от оператора присваивания, может даже не быть списком. Подойдет любой итерабельный объект, элементы которого можно сделать элементами списка
numbers = [1, 2, 3, 4]
numbers[1:3] = [8, 9]
numbers
[1,8, 9, 4]
--------------------------------------------------------------------------------------------------------------------
узнать смещение элемента в списке
>>> marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']
>>> marxes.index('Chico')
1
Если значение встречается в списке более одного раза, возвращается смещение только первого найденного элемента
Если неважен порядок элементов, то для хранения и поиска уникальных значений больше подойдет множество.
--------------------------------------------------------------------------------------------------------------------
Проверяем на наличие элемента в списке
>>> marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']
>>> 'Groucho' in marxes
True
>>> 'Bob' in marxes
False
--------------------------------------------------------------------------------------------------------------------
Подсчитываем количество включений значения
>>> marxes = ['Groucho', 'Chico', 'Harpo']
>>> marxes.count('Harpo')
1
--------------------------------------------------------------------------------------------------------------------
Преобразуем список в строку
>>> marxes = ['Groucho', 'Chico', 'Harpo']
>>> ', '.join(marxes)
'Groucho, Chico, Harpo'

join() противоположна split(), как показано здесь:
>>> friends = ['Harry', 'Hermione', 'Ron']
>>> separator = ' * '
>>> joined = separator.join(friends)
>>> joined
'Harry * Hermione * Ron'
>>> separated = joined.split(separator)
>>> separated
['Harry', 'Hermione', 'Ron']
>>> separated == friends
True
--------------------------------------------------------------------------------------------------------------------
Меняем порядок элементов
sort() - сортирует сам список
sorted() - возвращает отсортированную копию списка

Если элементы списка являются числами, они по умолчанию сортируются по возрастанию. Если строками — сортируются в алфавитном порядке
Mожно добавить аргумент reverse=True, чтобы отсортировать список по убыванию
--------------------------------------------------------------------------------------------------------------------
len() возвращает количество элементов списка
--------------------------------------------------------------------------------------------------------------------
Когда вы присваиваете один список более чем одной переменной, изменение списка
в одном месте также меняет его и в других:
>>> a = [1, 2, 3]
>>> a
[1, 2, 3]
>>> b = a
>>> b
[1, 2, 3]
>>> a[0] = 'surprise'
>>> a
['surprise', 2, 3]
--------------------------------------------------------------------------------------------------------------------
скопировать значения в отдельный новый список с помощью любого из этих методов:
a = [1, 2, [8, 9]]
b = a.copy()
c = list(a)
d = a[:]

a[2][1] = 10
print(a, b, c, d, sep='\n')
[zhuzhu@workpc ~]$ /bin/python /opt/GIT/zavtra_viuchu/python_stepik/test.py
[1, 2, [8, 10]]
[1, 2, [8, 10]]
[1, 2, [8, 10]]
[1, 2, [8, 10]]

методы копирования списков, которые мы уже рассмотрели, были поверхностными

Для того чтобы это исправить, нужно использовать функцию deepcopy():
a = [1, 2, [8, 9]]
b = copy.deepcopy(a)
print(a, b, sep='\n')
[zhuzhu@workpc ~]$ /bin/python /opt/GIT/zavtra_viuchu/python_stepik/test.py
[1, 2, [8, 10]]
[1, 2, [8, 9]]
--------------------------------------------------------------------------------------------------------------------
параллельное итерирование по нескольким последовательностям с помощью функции zip():
>>> days = ['Monday', 'Tuesday', 'Wednesday']
>>> fruits = ['banana', 'orange', 'peach']
>>> drinks = ['coffee', 'tea', 'beer']
>>> desserts = ['tiramisu', 'ice cream', 'pie', 'pudding']
>>> for day, fruit, drink, dessert in zip(days, fruits, drinks, desserts):
...
print(day, ": drink", drink, "eat", fruit, "enjoy", dessert)
...
Monday : drink coffee — eat banana — enjoy tiramisu
Tuesday : drink tea — eat orange — enjoy ice cream
Wednesday : drink beer — eat peach — enjoy pie

Функция zip() прекратит свою работу, когда будет выполнена самая короткая последовательность. Один из списков (desserts) оказался длиннее остальных, поэтому никто не получит пудинг, пока мы не увеличим остальные списки.

>>> english = 'Monday', 'Tuesday', 'Wednesday'
>>> french = 'Lundi', 'Mardi', 'Mercredi'
объединить эти кортежи с составлением пар
>>> list(zip(english, french))
[('Monday', 'Lundi'), ('Tuesday', 'Mardi'), ('Wednesday', 'Mercredi')]
словарь
>>> dict(zip(english, french))
{'Monday': 'Lundi', 'Tuesday': 'Mardi', 'Wednesday': 'Mercredi'}
--------------------------------------------------------------------------------------------------------------------
размножить списки с помощью оператора *
>>> ["blah"] * 3
['blah', 'blah', 'blah']
--------------------------------------------------------------------------------------------------------------------
Существует большая разница в работе строковых и списочных методов. Строковые методы не изменяют содержимого объекта к которому они применяются, а возвращают новое значение. Списочные методы, напротив, меняют содержимое объекта к которому применяются.
--------------------------------------------------------------------------------------------------------------------
list.append(item)  # Добавляет один элемент в конец списка.Возвращает None.
item — элемент, который будет добавлен.
--------------------------------------------------------------------------------------------------------------------
list.extend(iterable)  # Добавляет все элементы итерируемого объекта (списки, кортежи, строки и т. д.) в конец списка. Возвращает None.
iterable — итерируемый объект, элементы которого будут добавлены в список.
Если бы мы использовали append(), список others был бы добавлен как один из элементов списка
--------------------------------------------------------------------------------------------------------------------
list.insert(index, element)  # Добавляет элемент в список по указанному индексу.Возвращает None.
index – позиция (индекс), на которую будет помещен указанный элемент. Нумерация начинается с нуля. Также поддерживается отрицательная индексация.
element — элемент, который нужно поместить в список.
Вы также можете добавить все элементы итерируемого объекта в список, используя:
1. Оператор «+»:
a = [1, 2]
b = [3, 4]
a += b  
# Output: [1, 2, 3, 4]
--------------------------------------------------------------------------------------------------------------------
2. Слайсы / Срезы:
a = [1, 2]
b = [3, 4]
a[len(a):] = b
# Output: [1, 2, 3, 4]
Слайс задается тройкой чисел, разделенных запятой: start:stop:step. При этом необходимо помнить, что выборка не включает элемент определяемый stop.
Слайсы можно сконструировать заранее, а потом уже использовать по мере необходимости. Это возможно сделать, в виду того, что слайс – это объект класса slice. 
s = slice(0, 5, 1)
a[s]
[0, 1, 2, 3, 4]
--------------------------------------------------------------------------------------------------------------------
list.remove(element)  # Удаляет первый найденный в списке элемент, значение которого соответствует значению, переданному в качестве аргумента. Возвращает None.
element — элемент, который будет удален из списка. Если элемент в списке не найден, то возбуждается исключение ValueError.
Если список содержит повторяющиеся элементы, метод remove() удаляет только первое вхождение заданного элемента в списке.
Если нужно удалить элемент по индексу или вернуть значение удаляемого элемента, используйте list.pop().
--------------------------------------------------------------------------------------------------------------------
list.pop([index])  # Удаляет элемент по указанному индексу из списка и возвращает удаленный элемент.Возвращаемое значение: Элемент [по указанному индексу], который был удален из списка.
index — индекс искомого элемента в списке (целое число). Если индекс не указан, то удаляется последний элемент списка. Индексация начинается с нуля. Также поддерживается отрицательная индексация. Если индекс, переданный методу, вне диапазона списка, то возбуждается исключение IndexError.
Если нужно удалить элемент из списка не возвращая его, используйте list.remove().
Также вы можете использовать инструкцию del для удаления  элементов или срезов из списка.
--------------------------------------------------------------------------------------------------------------------
list.clear()  # Удаляет все элементы из списка. Возвращает None.
Также для удаления всех элементов из списка можно использовать инструкцию del
--------------------------------------------------------------------------------------------------------------------
TURPLES vs LISTS

Кортежи занимают меньше места.
Вы не сможете уничтожить элементы кортежа по ошибке.(неизменяемы)
Вы можете использовать кортежи в качестве словарных ключей
Именованные кортежи могут служить более простой альтернативой объектам.




















