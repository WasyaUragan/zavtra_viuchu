--------------------------------------

Список — это последовательность значений, разделенных запятыми и заключенных в квадратные скобки:

переменная = [
	"строка",
	"строка",
	]

--------------------------------------

словарь

переменная = {
	"уникальный ключ": "значение",
	"уникальный ключ": "значение",
	"уникальный ключ": "значение",
	}

--------------------------------------

объектом - фрагмент данных, в котором содержатся:

тип
уникальный идентификатор
значение, соответствующее типу
счетчик ссылок

--------------------------------------

Вот так можно получить частное и остаток одновременно:
>>> divmod(9,5)  # функция
(1, 4)  # двухэлементный кортеж

--------------------------------------

Этот пример возведения в степень:
>>> -5 ** 2
-25
аналогичен следующей конструкции:
>>> - (5 ** 2)
-25

--------------------------------------

преобразовать целое число в строку:
>>> value = 65
>>> bin(value)
'0b1000001'
>>> oct(value)
'0o101'
>>> hex(value)
'0x41'

--------------------------------------

Функция chr() преобразует целое число в его строковый эквивалент, состоящий из одного символа:
>>> chr(65)
'A'
Функция ord() выполняет противоположную задачу:
>>> ord('A')
65

--------------------------------------

возвращает булев эквивалент целого числа:
>>> bool(1)
True
>>> bool(0)
False

--------------------------------------

Если число в строке представлено не в десятичной системе счисления, а в какой-то иной, вы можете включить основание этой системы:
>>> int('10', 2) # двоичная
2
>>> int('10', 8) # восьмеричная
8
>>> int('10', 16) # шестнадцатеричная
16

--------------------------------------

к False приравниваются следующие значения:
булева переменная False;
значение None;
целое число 0;
число с плавающей точкой 0.0;
пустая строка (' ');
пустой список ([]);
пустой кортеж (());
пустой словарь ({});
пустое множество (set()).

--------------------------------------

Последовательность \t (табуляция) используется для выравнивания текста:
>>> print('\tabc')
abc

--------------------------------------

>>> name = 'Henny'
>>> name.replace('H', 'P')
'Penny'
>>> 'P' + name[1:]
'Penny'

--------------------------------------

>>> poem = '''All that doth flow we cannot liquid name
Or else would fire and water be the same;
But that is liquid which is moist and wet
Fire that property can never get.
Then 'tis not cold that doth the fire put out
But 'tis the wet that makes it die, no doubt.'''

>>> poem[:13]
'All that doth'

>>> len(poem)
250

>>> poem.startswith('All')
True

>>> poem.endswith('That\'s all, folks!')
False

>>> word = 'the'
>>> poem.find(word)
73
>>> poem.index(word)
73

>>> word = 'the'
>>> poem.rfind(word)
214
>>> poem.rindex(word)
214

>>> word = "duck"
>>> poem.find(word)
-1
>>> poem.rfind(word)
-1
>>> poem.index(word)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: substring not found
>>> poem.rfind(word)
-1
>>> poem.rindex(word)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: substring not found

>>> word = 'the'
>>> poem.count(word)
3

>>> poem.isalnum()
False

--------------------------------------

>>> setup = 'a duck goes into a bar...'

>>> setup.capitalize()
'A duck goes into a bar...'

>>> setup.title()
'A Duck Goes Into A Bar...'

>>> setup.upper()
'A DUCK GOES INTO A BAR...'

>>> setup.lower()
'a duck goes into a bar...'

>>> setup.swapcase()
'a DUCK GOES INTO A BAR...'

--------------------------------------

Отцентрируем строку в промежутке из 30 пробелов:
>>> setup.center(30)
' a duck goes into a bar... '

>>> setup.ljust(30)
'a duck goes into a bar... '

>>> setup.rjust(30)
' a duck goes into a bar...'

--------------------------------------

Старый стиль: %

Таблица 5.1. Типы преобразования
%s Строка
%d Целое число в десятичной системе счисления
%x Целое число в шестнадцатеричной системе счисления
%o Целое число в восьмеричной системе счисления
%f Число с плавающей точкой в десятичной системе счисления
%e Число с плавающей точкой в шестнадцатеричной системе счисления
%g Число с плавающей точкой в восьмеричной системе счисления
%% Символ %

Вы можете добавить другие значения между % и определением типа:

в начале располагается символ '%';
опциональный символ выравнивания: ничего или '+' означают выравнивание по правому краю, а '−' — по левому;
опциональное поле мин_ширина, в котором указывается длина строки;
опциональный символ '.', разделяющий поля мин_ширина и макс_символы;
опциональное поле макс_символы (используется в том случае, если тип преобразования s), в котором указывается, сколько символов значения нужно вывести на экран. Если тип преобразования f, в этом поле указывается точность (сколько символов выводится после десятичной точки);
символ, определяющий тип преобразования, из табл. 5.1.

--------------------------------------

Новый стиль: используем символы {} и функцию format()
имеет вид строка.format(данные)

>>> thing = 'woodchuck'
>>> place = 'lake'
>>> 'The {} is in the {}.'.format(thing, plкace)
'The woodchuck is in the lake.'

>>> 'The {1} is in the {0}.'.format(place, thing)
'The woodchuck is in the lake.'

Аргументы функции format() могут быть именованными:
>>> 'The {thing} is in the {place}'.format(thing='duck', place='bathtub')
'The duck is in the bathtub'

Они также могут быть словарями:
>>> d = {'thing': 'duck', 'place': 'bathtub'}
В следующем примере {0} — это первый аргумент функции format() (словарь d):
>>> 'The {0[thing]} is in the {0[place]}.'.format(d)
'The duck is in the bathtub.'

отличия от старого стиля:

начальное двоеточие (':');
опциональный символ-заполнитель (по умолчанию ' '), которым заполняется строка, если ее длина меньше, чем мин_ширина;
опциональный символ выравнивания. В этот раз вариантом по умолчанию является выравнивание по левому краю. Символ '<' означает выравнивание по левому краю, символ '>' — по правому, а символ '^' означает выравнивание по центру;
опциональный знак для чисел. Отсутствие значения приведет к тому, что знак будет отображаться только для отрицательных чисел. Символ ' ' означает, что для отрицательных чисел будет добавляться знак -, а для положительных — пробел (' ');
необязательное поле мин_ширина. Необязательный символ ('.') используется для отделения значений полей мин_ширина и макс_символы;
необязательное поле макс_символы;
тип преобразования.

>>> 'The {:!^10s} is at the {:!^10s}'.format(thing, place)
'The !!wraith!! is at the !!window!!'

--------------------------------------

Самый новый стиль: f-строки

то, что вы могли делать внутри функции format() из предыдущего раздела, можно сделать и здесь внутри фигурных скобок в главной строке.

>>> thing = 'wereduck'
>>> place = 'werepond'

в фигурных скобках можно размещать и выражения:
>>> f'The {thing.capitalize()} is in the {place.rjust(20)}'
'The Wereduck is in the werepond'

Для f-строк используется такой же язык форматирования (ширина, заполнитель, выравнивание), как и в новом стиле. Выражения размещаются после двоеточия:
>>> f'The {thing:>20} is in the {place:.^20}'
'The wereduck is in the ......werepond......'

f-строки позволяют выводить не только значения переменных, но и их имена
>>> f'{thing =}, {place =}'
thing = 'wereduck', place = 'werepond'

>>> f'{thing[-4:] =}, {place.title() =}'
thing[-4:] = 'duck', place.title() = 'Werepond'

после знака = можно поставить двоеточие, за которым будут следовать аргументы, такие как длины и выравнивания:
>>> f'{thing = :>4.4}'
thing = 'were'

--------------------------------------

























































