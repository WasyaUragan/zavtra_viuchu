######################################################################################
print() выводит на экран данные
input() считывает введенные с клавиатуры данные.
======================================================================================
Пример 1
print('Какой язык программирования ты изучаешь?')
language = input()
print(language, '- отличный выбор!')
----равно-----------------------------------------------------------------------------
language = input('Какой язык программирования ты изучаешь?')
print(language, '- отличный выбор!')
----равно-----------------------------------------------------------------------------
print(input('Какой язык программирования ты изучаешь?'), '- отличный выбор!')
----равно-----------------------------------------------------------------------------
print(f'{input()} - отличный выбор!')
======================================================================================
Пример 2
a = input() 
b = input()
c = input() # или a,b,c = input(),input(),input()
print(a)
print(b)
print(c)
----равно-----------------------------------------------------------------------------
print(input())
print(input())
print(input())
----равно-----------------------------------------------------------------------------
print(input(), input(), input(), sep='\n')  # каждый ввод с новой строки
======================================================================================
По умолчанию
sep=' ' (пробел)
end='\n' (перенос строки)
print('Python') = print('Python', end='\n')
--------------------------------------------------------------------------------------	
print('a', 'b', 'c', sep='*')  # a*b*c, sep устанавливает СТРОКУ '*'
--------------------------------------------------------------------------------------
Если перевод строки делать не нужно или требуется указать специальное окончание, то следует явно указать значение для параметра end.
--------------------------------------------------------------------------------------
print('a', 'b', 'c', end='@')  # a b c@
--------------------------------------------------------------------------------------
print('a', 'b', 'c', sep='*', end='finish')  # a*b*cfinish
--------------------------------------------------------------------------------------
print() с пустыми скобками = перевод строки
\n называется управляющей последовательностью = перевод строки
print('a', 'b', 'c', sep='', end='')  # убрать все выводимые символы
print('Python', end='\n\n\n')  # 3 перевода строки
======================================================================================
Variables:
<name> = <value>
name, surname = 'Timur', 'Guev' #множественное присваивание
name, surname = input(), input()
name1, name2 = name2, name1 #обмен значений переменных
--------------------------------------------------------------------------------------
Не используем в переменных (ключевые слова):
False;True;None;and;with;as;assert;break;class;continue;def;del;elif;else;except;
finally;try;for;from;global;if;import;in;is;lambda;nonlocal;not;or;pass;raise;
return;while;yield.
--------------------------------------------------------------------------------------
a = 100 # память - это такая масса коробок и в одну из них мы положили число 100, а затем на эту коробку прицепили этикетку с "а". Теперь, если нам понадобиться число сто, то мы можем сказать - возьми его в коробке с этикеткой "а".  

b = a # Тут мы говорим программе - найди коробку с этикеткой "а" и прилепи к ней еще одну этикетку "b". Теперь, чтобы взять число 100, мы можем сказать - найди коробку с этикеткой "а" или найди коробку с этикеткой "b". Коробка одна и та же, но найти мы ее можем теперь по двум разным этикеткам, если нужно.  

а = 200 #  А теперь мы в другую коробку положили число 200, сняли с первой коробки этикетку "a" и перецепили ее на коробку с числом 200, и теперь это число будет находиться по этикетке "а".

А на старой коробке, с числом 100, так и осталась прицеплена этикетка "b", поэтому поиск коробки с эикеткой "b" будет приводить именно к числу 100, пока и эту этикетку не перевесят на другую какю-нибудь коробку.

Ну и отсюда нужно понимать, что когда мы пишем в программе:  

a = 100  

b = 100  

c = 100

У нас не три коробки с числом 100 в памяти создаются, а одна, и на нее просто лепят три этикетки, по которым к этой коробке можно обратиться (сослаться на это место в памяти).  

А когда мы говорим присвоить 1 переменной значение 2, то мы говорим - найди на что ссылается 2 переменная и прицепи туда же (к этому значению) переменную 1, а не прицепи одну переменную к другой.
======================================================================================
https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html
======================================================================================
Целые числа и строки
num1 = 7  # числа обозначаются без кавычек, строки — с кавычками.
<имя переменной> = <математическая формула>  # общий вид
--------------------------------------------------------------------------------------
s = '1992' 
year = int(s)  # функция int() преобразует агрумент s в целое число
integer – целый 
--------------------------------------------------------------------------------------
num1 = int(input())  #  считать одно целое число
--------------------------------------------------------------------------------------
num = 17
s = str(17)  # преобразовать целое число в строку
--------------------------------------------------------------------------------------
a = int(input())
print('Объем =', a**3)
print('Площадь полной поверхности =', 6*(a**2))
равно
a = int(input())
print(f'Объем = {a**3}\nПлощадь полной поверхности = {6*a**2}')
--------------------------------------------------------------------------------------
n = int(input())
print('{} мин - это {} час {} минут.'.format(n, n//60, n%60))
# f-строки поддерживают арифметические действия, поэтому
# внутри { } можно написать имя переменной и произвести действия.
# да даже можно имя и не писать, а просто что-то сложить
--------------------------------------------------------------------------------------
3начение выражения вычисляется справа налево
--------------------------------------------------------------------------------------
print(2 ** 2)  # Возведение в степень 
--------------------------------------------------------------------------------------
print(10 // 3)  # Целочисленное деление, округление берётся в меньшую сторону
--------------------------------------------------------------------------------------
print(10 % 3)  # Деление с остатком, возвращает остаток от деления двух целых чисел
результатом деления n % m при n < m является число n
Пример:
7%-6=-5                     
7 / (-6) = -1.16              
7 // (-6) = -2                
7 = (-2) * (-6) + x = 12 + x  
x = 7 - 12 = -5               
7 % (-6) = -5 --------------------------------------------------------------------------------------
num = 17
a = num % 10  # определить последнюю цифру числа
b = num // 10  # определить первую цифру числа
num = 754
a = num % 10 # 4
b = (num % 100) // 10 или n//10%10  # 5
c = num // 100  # 7

n = 1234        # четырехзначное число
p = 1000        #         1000
--------------------------------------------------------------------------------------
print(n // p)   # 1
n = n % p       #    234
p = p // 10     #         100

print(n // p)   # 2
n = n % p       #    34
p = p // 10     #         10

print(n // p)   # 3
n = n % p       #    4
p = p // 10     #         1

print(n // p)   # 4
--------------------------------------------------------------------------------------
Операторы // и % имеют такой же приоритет, как и операторы умножения и обычного деления.
Наивысший приоритет имеет оператор возведения в степень **.
--------------------------------------------------------------------------------------




