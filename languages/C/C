#####
sudo yum groupinstall 'Development Tools'

Процеду́рное программи́рование — программирование на императивном языке, при котором последовательно выполняемые операторы можно собрать в подпрограммы, то есть более крупные целостные единицы кода, с помощью механизмов самого языка[1].

<unistd.h> - содердит заголовки функций, обеспечивающих доступ к АПИ ОС, системным вызовам.
-----------------
Опции

-Wall (выводить базовые предупреждения)
-Wextra (дополнительные)
-Werror (делает все предупреждения ошибками)
-----------------
// - строчный комментарий

коммент блока текста
/*
	sdfsd
	sdfas
	sdfsdf
	sdfsdf
*/	
-----------------
Модификаторы типов (4 вида)

signed и unsigned: указывают на наличие знака у переменной. Unsigned переменные могут хранить только положительные значения, в то время как signed переменные могут хранить и отрицательные значения.

short и long: меняют размер целочисленных переменных. Short уменьшает размер переменной до 2 байт, а long увеличивает его до 4 или 8 байт (в зависимости от архитектуры компьютера).

const: делает переменную неизменяемой, т.е. ее значение не может быть изменено после инициализации.

volatile: указывает компилятору, что значение переменной может изменяться внешними средствами (например, аппаратным обработчиком прерываний). Это предотвращает оптимизацию переменной компилятором и гарантирует, что каждое обращение к переменной будет происходить напрямую, без использования кэша или регистров.
-----------------
Составные типы данных
Составные типы данных позволяют объединять базовые типы переменных для создания сложных структур данных:

Массивы: позволяют хранить несколько значений одного типа в одной переменной. Важно отметить, что размер массива должен быть определен во время компиляции и не может изменяться после этого.
int numbers[] = {1, 3, 5, 7, 9};

i++ #  берет значение i и увеличивает на 1 ед

Структуры (struct): позволяют объединять переменные разных типов в одной переменной. Структуры полезны для представления объектов, которые имеют несколько атрибутов разных типов
struct Point p1 = {3, 4};

Объединения (union): похожи на структуры, но позволяют хранить переменные разных типов в одном и том же блоке памяти. Размер объединения равен размеру наибольшего элемента. Объединения полезны, когда необходимо использовать память эффективно или работать с разными типами данных, представленными в одном и том же месте памяти.

Конструкция union в языке программирования C позволяет использовать одну и ту же область памяти для разных типов данных. Например, можно объявить union, который может содержать целочисленное значение и значение с плавающей точкой, но в любой момент времени в union может быть только одно из этих значений.
-----------------
Указатели и ссылки

Указатели и ссылки являются важными концепциями в языке программирования C, так как они позволяют работать с памятью более гибко и эффективно:

 Указатели: хранят адреса переменных в памяти. Используются для динамического выделения памяти, передачи параметров в функции по ссылке и работы с массивами.

 Ссылки: похожи на указатели, но предоставляют более простой и безопасный способ доступа к переменным. В языке C ссылки реализованы через указатели. В языке программирования Cи нет понятия "ссылок" в том виде, как они представлены, например, в C++. Однако, в Cи можно использовать указатели для достижения аналогичного результата. 

Пример простой программы на Cи, демонстрирующей работу с указателями:

#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int num1 = 10;
    int num2 = 20;

    printf("До обмена: num1 = %d, num2 = %d\n", num1, num2);

    swap(&num1, &num2);

    printf("После обмена: num1 = %d, num2 = %d\n", num1, num2);

    return 0;
}
-----------------
Области памяти

Оперативная память, используемая при выполнении программ на языке Cи, делится на четыре основные области:

Стек (Stack) - это область памяти, в которой хранятся локальные переменные функций и параметры, передаваемые в функцию. Когда функция вызывается, для нее выделяется блок памяти на стеке. Простые типы данных, объявленные внутри функций, хранятся в этой области памяти.

Куча - это область памяти, используемая для динамического выделения памяти во время выполнения программы. Программист может явно выделить память для переменных в куче с помощью функций, таких как malloc(), calloc() или realloc(). При использовании динамического выделения памяти простые типы данных могут быть размещены в куче.

Статическая память - это область памяти, где хранятся глобальные переменные и статические локальные переменные. Простые типы данных, объявленные глобально или со статическим спецификатором хранения, размещаются в этой области памяти.

Область кода программы хранит исполняемый код программы и постоянные значения, такие как строковые литералы. Простые типы данных, являющиеся константами, также могут быть размещены в этой области памяти. Значения, хранящиеся в этой области, неизменны во время выполнения программы.

Блок-схема
https://pro-prof.com/archives/1462
-----------------
Передаем %make дополнительный путь к либам через CFLAGS:
make %{?_smp_mflags} CFLAGS="$CFLAGS -L%{_sourcedir}"






