========================
Инкапсуляция в Rust
Это принцип, при котором внутренняя реализация объекта скрывается, а взаимодействие с ним происходит через публичный интерфейс. В Rust инкапсуляция реализуется через систему модулей и модификаторы доступа (pub), что позволяет контролировать, какие данные и методы доступны извне.
========================
Области видимости в Rust
Это концепция, определяющая, где в коде переменные, функции, модули или другие сущности могут быть использованы или изменены. Области видимости ограничивают доступ к данным, предотвращая конфликты и ошибки, а также помогают управлять временем жизни переменных.
-------------------------
Переменные, объявленные внутри блока (например, внутри if, циклов, функций), видны только внутри этого блока.
Параметры и переменные функции существуют только в её теле.
-------------------------
Видимость элементов модуля контролируется ключевым словом pub (как обсуждалось ранее).
-------------------------
Переменная существует только в своей области видимости. При выходе из неё память автоматически освобождается (срабатывает drop).
========================
Переменная - это именованная область памяти, к которой мы имеем доступ из программы. Туда можно помещать значения и затем извлекать их.
========================
// отличие метода от функции в rust

Метод — привязан к экземпляру структуры (struct) или перечисления (enum). Вызывается через точку: экземпляр.метод().
Функция — существует независимо от типов. Вызывается напрямую: функция().

Метод объявляется внутри блока impl для типа и принимает первым параметром self, &self или &mut self.
Функция объявляется вне блоков impl и не имеет доступа к self.

Метод может читать или изменять поля структуры через self.
Функция работает только с явно переданными аргументами.

Метод может быть статическим (без self), используемым для создания экземпляров или утилит.
Функция всегда вызывается по имени, а не через тип.

