###
==============================
Переменные в bash - это область памяти
(обычно оперативной), в которой хранится значение.
==============================
Классификация переменных
------------------------------
Механизм установки
 - Пользовательские переменные
   filename="README.txt"; echo "$filename"
 - Зарезервированные (системные) переменные
   echo "$PATH"
 - Специальные параметры
   echo "$?"

Область видимости
 - Переменные окружения (или глобальные)
   Выводятся утилитой env, запущенной без параметров.
   echo "$PATH"
 - Локальные переменные
   filename="README.txt"; echo "$filename"

Содержимое
 - Строка
   filename="README.txt"
 - Число
   declare -i number=10/2 ; echo "$number"
 - Индексируемый массив
   Хранит нумерованный список строк.
   cities=("London" "New York" "Berlin") ; 
   echo "${cities[1]}"
   cities[0]="London" ;
   cities[1]="New York";
   cities[2]="Berlin";
   echo "${cities[1]}"
 - Ассоциативный массив
   Структура данных, каждый элемент которой — это пара ключ-значение.
   Ключом и значением являются строки.
   declare -A cities=(["Alice"]="London" \
                      ["Bob"]="New York" \
                      ["Eve"]="Berlin" ) ;
   echo "${cities[Bob]}"

Возможность
изменения
 - Константны
   readonly CONSTANT="ABC" ; echo "$CONSTANT"

   declare -r CONSTANT="ABC" ; echo "$CONSTANT"
 - Переменные
   filename="README.txt"
==============================
Чтобы избежать нежелательных подстановок Bash, заключайте все обращения к переменным в двойные кавычки “.

filename1="my file.txt"
cp "$filename1" ~
==============================
Cписок подстановок и порядок выполнения
------------------------------
 - Brace Expansion
   Подстановка фигурных скобок
   echo a{d,c,b}e
 - Tilde Expansion
   cd ∼
 - Parameter Expansion
   Подстановка параметров и переменных
   echo "$PATH"
 - Arithmetic Expansion
   Подстановка вместо арифметических выражений их результатов
   echo $((4+3))
 - Command Substitution
   Подстановка вместо команды её вывода
   echo $(< README.txt)
 - Process Substitution
   Подстановка вместо команды её вывода. В отличие от Command Substitution эта подстановка выполняется асинхронно²⁴⁹. Ввод и вывод команды привязаны к временному файлу.
   diff <(sort file1.txt) <(sort file2.txt)
 - Word Splitting
   Разделение аргументов командной строки на слова и передача их в качестве отдельных параметров.
   cp file1.txt file2.txt ∼
 - Filename Expansion (globbing)
   Подстановка имён файлов вместо шаблонов.
   rm ∼/delete/*
 - Quote Removal
   Удаление всех неэкранированных символов \, ‘ и “, которые не были получены в результате одной из предыдущих подстановок.
   cp "my file.txt" ∼
==============================
Знак $ перед именем переменной — это сокращенная форма подстановки переменных.
  ${filename}
------------------------------
Используйте полную форму, чтобы избежать неоднозначности.
  prefix="my"
  name="file.txt"
  cp "${prefix}_${name}" ~ или cp "$prefix"_"$name" ~
==============================
Mожно подставить некоторое значение по умолчанию.
  cp file.txt "${directory:-~}"
  При обработке этой команды Bash проверит, определена ли переменная directory и имеет ли она непустое значение. Если это так, выполнится обычная подстановка. В противном случае Bash подставит значение, следующее за символом минус -.
==============================
Задать значение по умолчанию можно несколькими способами.
------------------------------
  ${parameter:-word}

  Если переменная parameter не объявлена или имеет пустое значение будет подставлено значение по умолчанию word. В противном случае подставляется значение переменной.
------------------------------
  ${parameter:=word}

  Eсли переменная не объявлена или имеет пустое значение, ей будет присвоено значение по умолчанию. Затем она будет подставлена. В противном случае подставляется значение переменной. Переопределение позиционных и специальных параметров таким способом недопустимо.
------------------------------
  ${parameter:?word}

  Если переменная не объявлена или имеет пустое значение, значение по умолчанию будет выведено в стандартный поток ошибок. После этоговыполнение скрипта будет завершено с кодом возврата отличным от0. В противном случае подставляется значение переменной.
------------------------------
  ${parameter:+word}

  Если переменная не объявлена или имеет пустое значение, подстановки не будет. В противном случае подставляется значение по умолчанию.
------------------------------
