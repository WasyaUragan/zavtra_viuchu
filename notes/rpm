############################
Первым делом нужно создать в своём домашнем каталоге файл директорию rpmbuild со следующей структурой:

mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}  # создать сразу несколько вложенных директорий

~/rpmbuild
|-- BUILD
|-- BUILDROOT
|-- RPMS
|   |-- i586
|   |-- x86_64
|   `-- noarch
|-- SOURCES
|-- SPECS
`-- SRPMS
--------------------------------------------------------------------------------------
echo '%_topdir %(echo $HOME)/rpmbuild' >~/.rpmmacros  # Создаем файл конфигурации утилиты rpmbuild, чтобы она узнала, где находится созданное дерево каталогов
--------------------------------------------------------------------------------------
rpm -qip package.rpm  # вывод заголовков spec-файла
	где «q» означает «режим запросов (query)», «i» — получение информации о пакете, «p» — получение информации об указанном файле пакета (без этой опции будет получена информация о пакете, установленном в системе, если он установлен).
--------------------------------------------------------------------------------------
rpm2cpio python-pyasn1-0.3.7-6.el8.src.rpm | cpio -idmv  # распаковать дерево файлов, предоставляемых данным пакетом, в текущую директорию, где rpm2cpio пишет в стандартный вывод cpio-архив, хранящийся в rpm-пакете; утилита cpio распаковывает архив, принятый из стандартного ввода. Параметр «i» включает режим распаковки, а «d» создает нужные директории.
--------------------------------------------------------------------------------------
rpm -qlp package.rpm  # Посмотреть, какие файлы предоставляет пакет не распаковывая его
--------------------------------------------------------------------------------------
rpmbuild -bs  # собрать только исходник
rpmbuild -bb  # собрать только бинарник
rpmbuild -ba  # собрать и исходник, и бирнарник
rpmbuild -bp  # выполняет только prep
--------------------------------------------------------------------------------------
rpmspec -P python-magic.spec > tmp  # раскрыть все макросы спека, записать в файл tmp
--------------------------------------------------------------------------------------
rpm -ql indicator-1.3.3-1.el8.sz.noarch  # директории, куда распакован пакет
--------------------------------------------------------------------------------------
rpm -qf /usr/share/wayland-sessions/gnome-classic-wayland.desktop  # к какому пакету относится файл
--------------------------------------------------------------------------------------
rpm -e ict-service-1.3.2-1.el8.sz.noarch --nodeps --noscripts  # если пакет выебывается, удалить нахуй его
--------------------------------------------------------------------------------------
к какой группе пакетов относится пкет можно посмотреть в
/c45d1a64-8062-4f68-a896-226327b138a6/sintezm-kuf-el8-4.4.20210225/repodata/ищем_файл_comps
--------------------------------------------------------------------------------------
Собираем пакеты:
cd /path/2/dir  # переходим в рабочую директорию 
rpm -ivh naprimer.src.rpm  # устанавливаем в нее пакет
tar -zcf ./SOURCES/zabbix-6.2.6.tar.gz ./SOURCES/zabbix-6.2.6/  # тарим папку (название указываем в спеке)
накидываем в SOURCES/ всё что нужно  # патчи, конфиги, прочую лабуду (перечислены в спеке, если же файл там не указан, будет проигнорирован)
rpmbuild -bs ../SPECS/zabbix.spec  # собираем срц.рпм
mock -r /opt/zabbix/default.cfg --rebuild /root/rpmbuild/SRPMS/zabbix-6.2.6-release4.el8.src.rpm  # указываем путь к нужному default.cfg (иначе возьмет дефолт), путь к срц, собираем все остальное.
cd /var/lib/mock/  # результат тут, название папки указывается в default.cfg
--------------------------------------------------------------------------------------
Для проверки валидности SPEC файлов рекомендуется применять утилиту rpmlint:
rpmlint foo-bar.spec
--------------------------------------------------------------------------------------
загрузить перепакованные src 
scp root@10.128.150.123:/home/exports/RESULTS/GSC_build_work/Source-8.1-fix
указываю в jenkins ссылку на src в графе SOURCE (собрать с параметрами)
--------------------------------------------------------------------------------------
чистка пакета из проекта гит

1) выпускаем в проекте гит тег с ключами:
	версия-релиз-svace-mock-chroot-RC (ключ определяем относительно задачи)
	например: 3.6.8-1-chroot   test_build
2) выпуск тега тригерит джобу в дженкинс, джоба обтрабатывает (нет)
3) идем на ноду дженкинс /home/jenkins/workspace/../../наш пакет
	здесь все что нужно для сборки
4) от своего пользователя собираем src.rpm
	mock -r python3.cfg -N -n --buildsrpm --spec=python3.spec --sources=./ --resultdir=./result/ --rootdir=/home/jenkins/chroots/python3/root/	
--------------------------------------------------------------------------------------
Как модифицировать любой файл в RPM (включая SPEC): 
1) Устанавливаем rpmrebuild из EPEL (в Fedora он находится в базовом репозитории)
2) Выполняем команду rpmrebuild -enp <пакет>.rpm (не src.rpm)
3) Открывается сгенерированный spec на редактирование
4) Не закрывая файл, открываем соседний терминал и идем в папку ~/.tmp
5) Видим примерно такую картину:

i.borisov@build4 ~/.tmp> tree -L 5
.
└── rpmrebuild.312443
    └── work
        ├── changelog.1
        ├── conflicts.1
        ├── description.1
        ├── enhances.1
        ├── files.1
        ├── files.in
        ├── obsoletes.1
        ├── post.1
        ├── posttrans.1
        ├── postun.1
        ├── pre.1
        ├── preamble.1
        ├── pretrans.1
        ├── preun.1
        ├── PROCESSING
        ├── provides.1
        ├── recommends.1
        ├── requires.1
        ├── root
        │   └── usr
        │       ├── bin
        │       ├── include
        │       ├── lib
        │       ├── lib64
        │       └── share
        ├── rpmrebuild_rpmqf.src.1
        ├── rpmrebuild_rpmqf.src.2
        ├── rpmrebuild_rpmqf.src.3
        ├── rpmrebuild_rpmqf.src.4
        ├── rpmrebuild_rpmqf.src.5
        ├── rpmrebuild_rpmqf.src.6
        ├── rpmrebuild_rpmqf.src.7
        ├── spec.1
        ├── spec.2
        ├── suggests.1
        ├── supplements.1
        ├── triggers.1
        └── verifyscript.1

6) Правим все что нужно
7) Возвращаемся в первый терминал, где открыт spec на редактирование
8) НЕ сохраняем этот spec, просто выходим из редактора
9) Соглашаемся на перепаковку, ждем... готово
--------------------------------------------------------------------------------------
# test deps
rpm --test --dbpath /tmp/testdb -Uvh *.rpm
--------------------------------------------------------------------------------------
# получить список srс 
for i in $(cat ./rpms_list); do rpm -qi ${i} | grep 'Source RPM  :' | cut -b14-; done | sort -u > rocky94_min_default_src_list
--------------------------------------------------------------------------------------
# Раскрать %pre %post скрипты пакета
rpm -qp --scripts package

















