###
-------------------------
Линковка
-------------------------
Когда Вы собираете Ваш проект, и хотите включить в него библиотеку(собранную Статически или Динамически *.a или *.so) происходит связывание ld всего Вашего кода. 
Когда вы где-то пишите, что тут будет вызываться функция библиотеки A, компилятор оставляет там пометку (по сути обещание), что референс на данные call будет подставлен на этапе линковки.
Далее ликовщик смотрит на флаги связывания SHARED или STATIC(что и отвечает за динамическую или статическую библиотеку) и ищет ее согласно стандартным путям и/или указанным Вами путям.
=========================
Статическая линковка
=========================
Статическая библиотека - (*.a) собрана для непосредственного встраивания в Ваш исполняемый файл. Она просто будет помещена в соответствии с указанием linker'а. Тут будет статическая линковка.

Статическая компоновка гарантирует, что приложение может работать как автономный двоичный файл, поскольку мы интегрируем с ним внешние библиотеки во время компиляции.

Каждый статически связанный процесс получает свою копию кода и данных. Таким образом, в случаях, когда безопасность очень важна (например, при финансовых транзакциях), мы используем статическое связывание. Это происходит потому, что оно полностью изолирует один процесс от другого, предоставляя каждому независимую среду.

Для статически связанных приложений мы объединяем все в нашем приложении. Следовательно, нам не нужно следить за тем, чтобы в системе клиента была доступна правильная версия библиотек.

Кроме того, статическая компоновка обеспечивает более быстрое выполнение, поскольку мы копируем все содержимое библиотеки во время компиляции. Следовательно, нам не нужно выполнять запрос на поиск неразрешенных символов во время выполнения. Таким образом, мы можем выполнять статически связанную программу быстрее, чем динамически связанную.

Мы используем статическую компоновку там, где нам требуются безопасные и взаимоисключающие процессы, не использующие общий код. Мы также используем статическую компоновку для встраиваемых проектов, где нам нужна контролируемая и быстрая среда выполнения без проблем с привязкой во время выполнения. 
=========================
Динамическая линковка
=========================
Динамическая библиотека - (*.so) - будет просто подключаться как link на референс и не попадет в Ваш бинарь. Будет лишь указание где брать референс на тот или иной функционал. Тут будет динамическая линковка.

При динамическом компоновании мы копируем имена внешних библиотек в наш конечный исполняемый файл в виде неразрешенных символов. Фактическое связывание этих неразрешенных символов выполняется только во время выполнения.

При обнаружении неразрешенного символа мы запрашиваем его в оперативной памяти. Если соответствующая библиотека не загружена, операционная система загружает ее в память. Таким образом, операционная система выполняет динамическую компоновку для нас, разрешая каждый внешний символ на первом этапе. В результате мы загружаем в память только одну копию библиотеки, и все процессы используют ее.

При динамическом компоновании мы сохраняем в памяти только одну копию разделяемой библиотеки. Таким образом, исполняемый файл нашей программы меньше по размеру, чем у статически связанного файла. Кроме того, это повышает эффективность использования памяти, поскольку все процессы могут совместно использовать библиотеку в оперативной памяти вместо использования отдельной копии. Аналогичным образом, все процессы, совместно использующие библиотеку, также получают выгоду от использования кэша.

Динамическая компоновка приводит к снижению среднего времени загрузки. В среднем многие программы используют небольшое количество внешних библиотек. Таким образом, мы загружаем каждую библиотеку только один раз, а не несколько раз. Таким образом, все вызовы после первого будут занимать меньше времени загрузки. Это связано с тем, что в память будут загружены только отсутствующие неразрешенные символы, но после первой загрузки все они будут доступны для последующих вызовов.

С точки зрения развертывания и сопровождения, динамическая компоновка упрощает обновление и развертывание. Мы можем обновлять и перекомпилировать внешние библиотеки, чтобы предлагать последние изменения в наших программах. После перекомпиляции мы перезагружаем новые версии.

Динамическая компоновка способствует модульности. Мы используем ее для разработки больших программ, для которых требуются версии на нескольких языках, содержащие несколько модулей.

Мы используем динамическую компоновку, когда у нас есть много приложений, использующих общий набор библиотек.

Статическая компоновка

Выполняется во время компиляции
Библиотеки, на которые даны ссылки, находятся в двоичном файле
Исполняемые файлы большего размера
Загружаются медленнее
Сложны в обслуживании

Динамическая компоновка

Выполняется во время выполнения
Мы загружаем библиотеки во время выполнения
Исполняемые файлы меньшего размера
Быстрее загружаются
Легче обновляются

Главное отличие:
В то время как статическая компоновка копирует все библиотеки, используемые в нашем коде, в конечный исполняемый файл, динамическая компоновка работает во время выполнения.
-------------------------

=========================
API
=========================
Application Programming Interface

Это набор общедоступных типов / переменных / функций, которые вы предоставляете из своего приложения / библиотеки.

Это спецификация функций (включая методы в OOPL) на уровне исходного кода, что это за функция, какие аргументы должны быть установлены и каково возвращаемое значение. 
Web API - это API веб-сервисов. Другими словами, API - это более широкое понятие, чем Web API.


=========================
ABI
=========================
Application Binary Interface

Это интерфейс, который связывает два бинарных модуля программы на уровне машинного кода. Он задаёт низкоуровневые аспекты взаимодействия между элементами программного обеспечения, с акцентом на выполнение инструкций процессора. 1

Некоторые основные компоненты ABI:

Конвенция вызова (Calling Convention).
    Устанавливает правила передачи параметров в функции, возврата результатов, распределения регистров и ответственности за их сохранение. 1
Формат бинарных файлов (Binary Format).
    Определяет стандарты хранения и организации исполняемых и объектных файлов, библиотек. 1
Системные вызовы (System Calls).
    Включает набор интерфейсов для взаимодействия с операционной системой. 1
Представление данных (Data Representation).
    Задает формат и выравнивание данных, таких как числа с плавающей запятой, массивы и структуры в памяти. 1

ABI обеспечивает совместимость между различными программными модулями, позволяя использовать библиотеки, скомпилированные разными компиляторами.


=========================
system call
=========================
Систе́мный вы́зов (англ. system call) в программировании и вычислительной технике — обращение прикладной программы к ядру операционной системы для выполнения какой-либо операции.
Современные операционные системы (ОС) предусматривают разделение времени между выполняющимися вычислительными процессами (многозадачность) и разделение полномочий, препятствующее обращению исполняемых программ к данным других программ и оборудованию.


























