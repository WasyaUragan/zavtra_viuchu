##
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
base_class.py
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
import signal

предоставляет механизмы для использования обработчиков сигналов в Python.
Сигналы - это функция операционной системы, которая позволяет уведомлять программу о событии и обрабатывать его асинхронно
--------------------------------------------------------------------------------------------------------------------
import time

модуль для работы со временем в Python.
--------------------------------------------------------------------------------------------------------------------
from abc import abstractmethod
Abstract Base Classes

Абстрактный класс - это класс в котором созданы абстрактные методы - методы, которые обязательно должны присутствовать в дочерних классах. Создавть экзепмляр абстрактного класса нельзя, его надо наследовать и уже у дочернего класса можно создать экземпляр. При этом экземпляр дочернего класса можно создать только в том случае, если у дочернего класса есть реализация всех абстрактных методов.

Начиная с версии Python 2.6, в состав библиотеки входит модуль abc. В этом модуле определен декоратор @abstractmethod, который позволяет указать, что метод, перед которым расположен декоратор, является абстрактным. При попытке создать экземпляр класса-потомка, в котором не переопределен абстрактный метод, возбуждается исключение TypeErrror. 
--------------------------------------------------------------------------------------------------------------------
from datetime import datetime

Модуль datetime предоставляет классы для обработки времени и даты разными способами.
Класс datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None) - комбинация даты и времени.

Обязательные аргументы:

datetime.MINYEAR (1) ≤ year ≤ datetime.MAXYEAR (9999)
1 ≤ month ≤ 12
1 ≤ day ≤ количество дней в данном месяце и году
Необязательные:

0 ≤ minute < 60
0 ≤ second < 60
0 ≤ microsecond < 1000000
--------------------------------------------------------------------------------------------------------------------
from typing import Optional

Тип Optional() модуля typing представляет собой аннотацию неопределенного типа.
Запись Optional[X] эквивалентна записи X | None (или Union[X, None]).

Изменено в версии 3.10: Optional теперь может быть записан как X|None
--------------------------------------------------------------------------------------------------------------------
from psycopg2.errors import lookup

Стандартные библиотеки Python не предоставляют встроенного функционала для работы с PostgreSQL, однако есть большое количество сторонних библиотек. Наиболее популярной из них является Psycopg 2

psycopg2.errors.lookup(code)
"""Lookup an error code and return its exception class.
Raise KeyError if the code is not found.
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
notify_fintech.py
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
future был введен в Python 2.1, и его инструкции меняют способ интерпретации кода Python. Он сообщает интерпретатору скомпилировать некоторые операторы как те, которые будут доступны в будущих версиях Python, т.е. Python использует функцию from future import feature для резервного копирования функций из более высоких версий Python в текущий интерпретатор.

from __future__ import absolute_import, division, print_function, unicode_literals

print_function - перенести функцию print из Python 3 в Python 2.

unicode_literals - Строковые литералы в Python 2 по умолчанию являются ‘str’, но если мы используем from __future__ import unicode_literals, тип строкового литерала изменится на Unicode.

absolute_import - В Python 2 вы могли иметь только неявный относительный импорт, тогда как в Python 3 вы могли иметь явный или абсолютный импорт. __future__ import absolute_import позволяет заключать в скобки несколько операторов импорта, заключенных в скобки.

division - Простое деление 8 на 7 возвращает 0 в Python 2.x.
print(8/7)
0
Использование from __future__ import division позволяет программе Python 2 использовать __truediv__().
from __future__ import division
print(8/7)
1.1428571428571428
--------------------------------------------------------------------------------------------------------------------
import errno

Модуль предоставляет символьное обозначение стандартных системных ошибок. 
/usr/include/asm-generic/errno.h
--------------------------------------------------------------------------------------------------------------------
import fcntl

Этот модуль выполняет файловый контроль и контроль ввода-вывода для файловых дескрипторов.
Файловый дескриптор — это неотрицательное целое число. Когда создается новый поток ввода-вывода, ядро возвращает процессу, создавшему поток ввода-вывода, его файловый дескриптор.
Ко всем потокам ввода-вывода (которые могут быть связаны как с файлами, так и с каталогами, сокетами и FIFO) можно получить доступ через так называемые файловые дескрипторы.
--------------------------------------------------------------------------------------------------------------------
import os

Модуль os предоставляет множество функций для работы с операционной системой, причём их поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.
--------------------------------------------------------------------------------------------------------------------
import select

Доступ к функциям ОС select(), poll() и epoll().
Функция select() модуля select представляет простой интерфейс для системного вызова Unix select().
Подробнее о системном вызове Unix select() можно посмотреть командой терминала $ man select. В Windows, функция модуля select.select() работает ТОЛЬКО с сокетами, файловые объекты недопустимы!

Функция epoll() модуля select возвращает объект пограничного опроса Epoll, который можно использовать как интерфейс Edge или Level Triggered для событий ввода-вывода. Объекты Epoll поддерживают протокол управления контекстом.

Функция poll() модуля select возвращает объект опроса Poll, который поддерживает регистрацию и отмену регистрации файловых дескрипторов, а затем опрос их на предмет событий ввода-вывода. Вызов операционной системы poll(), обеспечивает лучшую масштабируемость для сетевых серверов.
--------------------------------------------------------------------------------------------------------------------
import sys

Модуль sys обеспечивает доступ к некоторым переменным и функциям, взаимодействующим с интерпретатором python.
--------------------------------------------------------------------------------------------------------------------
import json

JSON (JavaScript Object Notation) - простой формат обмена данными, основанный на подмножестве синтаксиса JavaScript. Модуль json позволяет кодировать и декодировать данные в удобном формате.
--------------------------------------------------------------------------------------------------------------------
from collections import namedtuple

Именованные кортежи присваивают имя каждому значению элемента в кортеже и тем самым создают более читаемый код. Они могут использоваться везде, где используются обычные кортежи и добавляют возможность доступа к полям по имени вместо индекса позиции.
--------------------------------------------------------------------------------------------------------------------
from six import string_types

Possible types for text data. This is basestring() in Python 2 and str in Python 3.

Six предоставляет простые утилиты для переноса различий между Python 2 и Python 3.
It is intended to support codebases that work on both Python 2 and 3 without modification. six consists of only one Python file, so it is painless to copy into a project.





























